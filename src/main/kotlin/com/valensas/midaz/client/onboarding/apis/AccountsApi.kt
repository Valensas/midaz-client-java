/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.midaz.client.onboarding.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType


import com.midaz.client.onboarding.models.Account
import com.midaz.client.onboarding.models.CreateAccountInput
import com.midaz.client.onboarding.models.Error
import com.midaz.client.onboarding.models.InlineResponse2003
import com.midaz.client.onboarding.models.UpdateAccountInput
import com.midaz.client.onboarding.infrastructure.*

class AccountsApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsAliasAliasGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, alias: kotlin.String, xRequestId: kotlin.String? = null): Account {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsAliasAliasGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, alias = alias, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsAliasAliasGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, alias: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Account> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsAliasAliasGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, alias = alias, xRequestId = xRequestId)
        return request<Unit, Account>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsAliasAliasGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, alias: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "alias" to alias,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsExternalCodeGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, code: kotlin.String, xRequestId: kotlin.String? = null): Account {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsExternalCodeGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, code = code, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsExternalCodeGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, code: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Account> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsExternalCodeGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, code = code, xRequestId = xRequestId)
        return request<Unit, Account>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsExternalCodeGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, code: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "code" to code,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/external/{code}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortOrder
     */
    enum class SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAccountsGet(val value: kotlin.String) {
        @JsonProperty(value = "asc") asc("asc"),
        @JsonProperty(value = "desc") desc("desc")
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAccountsGet? = null): InlineResponse2003 {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, startDate = startDate, endDate = endDate, sortOrder = sortOrder)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAccountsGet? = null): ResponseEntity<InlineResponse2003> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, startDate = startDate, endDate = endDate, sortOrder = sortOrder)
        return request<Unit, InlineResponse2003>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAccountsGet? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metadata != null) {
                    put("metadata", listOf(metadata.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdDelete(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): Unit {
        v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdDeleteWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdDeleteWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Unit> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdDeleteRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdDeleteRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "*/*"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): Account {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Account> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return request<Unit, Account>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdPatch(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, account: UpdateAccountInput, xRequestId: kotlin.String? = null): Account {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdPatchWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, account = account, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdPatchWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, account: UpdateAccountInput, xRequestId: kotlin.String? = null): ResponseEntity<Account> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdPatchRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, account = account, xRequestId = xRequestId)
        return request<UpdateAccountInput, Account>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsIdPatchRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, account: UpdateAccountInput, xRequestId: kotlin.String? = null) : RequestConfig<UpdateAccountInput> {
        val localVariableBody = account
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsMetricsCountHead(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null): Unit {
        v1OrganizationsOrganizationIdLedgersLedgerIdAccountsMetricsCountHeadWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId)
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsMetricsCountHeadWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Unit> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsMetricsCountHeadRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsMetricsCountHeadRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "*/*"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/metrics/count",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, account: CreateAccountInput, xRequestId: kotlin.String? = null): Account {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, account = account, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, account: CreateAccountInput, xRequestId: kotlin.String? = null): ResponseEntity<Account> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountsPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, account = account, xRequestId = xRequestId)
        return request<CreateAccountInput, Account>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountsPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, account: CreateAccountInput, xRequestId: kotlin.String? = null) : RequestConfig<CreateAccountInput> {
        val localVariableBody = account
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
