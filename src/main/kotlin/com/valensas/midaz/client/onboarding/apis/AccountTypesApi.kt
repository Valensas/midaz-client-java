/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.midaz.client.onboarding.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType


import com.midaz.client.onboarding.models.AccountType
import com.midaz.client.onboarding.models.CreateAccountTypeInput
import com.midaz.client.onboarding.models.Error
import com.midaz.client.onboarding.models.InlineResponse2002
import com.midaz.client.onboarding.models.UpdateAccountTypeInput
import com.midaz.client.onboarding.infrastructure.*

class AccountTypesApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = null, page: kotlin.Int? = null, cursor: kotlin.String? = null, sortOrder: kotlin.String? = null, startDate: kotlin.String? = null, endDate: kotlin.String? = null): InlineResponse2002 {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, cursor = cursor, sortOrder = sortOrder, startDate = startDate, endDate = endDate)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = null, page: kotlin.Int? = null, cursor: kotlin.String? = null, sortOrder: kotlin.String? = null, startDate: kotlin.String? = null, endDate: kotlin.String? = null): ResponseEntity<InlineResponse2002> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, cursor = cursor, sortOrder = sortOrder, startDate = startDate, endDate = endDate)
        return request<Unit, InlineResponse2002>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = null, page: kotlin.Int? = null, cursor: kotlin.String? = null, sortOrder: kotlin.String? = null, startDate: kotlin.String? = null, endDate: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metadata != null) {
                    put("metadata", listOf(metadata.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/account-types",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdDelete(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): Unit {
        v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdDeleteWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdDeleteWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Unit> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdDeleteRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdDeleteRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/account-types/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): AccountType {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<AccountType> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return request<Unit, AccountType>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/account-types/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdPatch(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, accountType: UpdateAccountTypeInput, xRequestId: kotlin.String? = null): AccountType {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdPatchWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, accountType = accountType, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdPatchWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, accountType: UpdateAccountTypeInput, xRequestId: kotlin.String? = null): ResponseEntity<AccountType> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdPatchRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, accountType = accountType, xRequestId = xRequestId)
        return request<UpdateAccountTypeInput, AccountType>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesIdPatchRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, accountType: UpdateAccountTypeInput, xRequestId: kotlin.String? = null) : RequestConfig<UpdateAccountTypeInput> {
        val localVariableBody = accountType
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/account-types/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, accountType: CreateAccountTypeInput, xRequestId: kotlin.String? = null): AccountType {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, accountType = accountType, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, accountType: CreateAccountTypeInput, xRequestId: kotlin.String? = null): ResponseEntity<AccountType> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, accountType = accountType, xRequestId = xRequestId)
        return request<CreateAccountTypeInput, AccountType>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAccountTypesPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, accountType: CreateAccountTypeInput, xRequestId: kotlin.String? = null) : RequestConfig<CreateAccountTypeInput> {
        val localVariableBody = accountType
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/account-types",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
