/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.midaz.client.onboarding.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType


import com.midaz.client.onboarding.models.CreateOrganizationInput
import com.midaz.client.onboarding.models.Error
import com.midaz.client.onboarding.models.InlineResponse200
import com.midaz.client.onboarding.models.Organization
import com.midaz.client.onboarding.models.UpdateOrganizationInput
import com.midaz.client.onboarding.infrastructure.*

class OrganizationsApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )

    /**
     * enum for parameter sortOrder
     */
    enum class SortOrderV1OrganizationsGet(val value: kotlin.String) {
        @JsonProperty(value = "asc") asc("asc"),
        @JsonProperty(value = "desc") desc("desc")
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsGet(authorization: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsGet? = null): InlineResponse200 {
        val result = v1OrganizationsGetWithHttpInfo(authorization = authorization, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, startDate = startDate, endDate = endDate, sortOrder = sortOrder)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsGetWithHttpInfo(authorization: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsGet? = null): ResponseEntity<InlineResponse200> {
        val localVariableConfig = v1OrganizationsGetRequestConfig(authorization = authorization, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, startDate = startDate, endDate = endDate, sortOrder = sortOrder)
        return request<Unit, InlineResponse200>(
            localVariableConfig
        )
    }

    fun v1OrganizationsGetRequestConfig(authorization: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsGet? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metadata != null) {
                    put("metadata", listOf(metadata.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsIdDelete(authorization: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): kotlin.String {
        val result = v1OrganizationsIdDeleteWithHttpInfo(authorization = authorization, id = id, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsIdDeleteWithHttpInfo(authorization: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<kotlin.String> {
        val localVariableConfig = v1OrganizationsIdDeleteRequestConfig(authorization = authorization, id = id, xRequestId = xRequestId)
        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    fun v1OrganizationsIdDeleteRequestConfig(authorization: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "*/*"

        val params = mutableMapOf<String, Any>(
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/organizations/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsIdGet(authorization: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): Organization {
        val result = v1OrganizationsIdGetWithHttpInfo(authorization = authorization, id = id, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsIdGetWithHttpInfo(authorization: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Organization> {
        val localVariableConfig = v1OrganizationsIdGetRequestConfig(authorization = authorization, id = id, xRequestId = xRequestId)
        return request<Unit, Organization>(
            localVariableConfig
        )
    }

    fun v1OrganizationsIdGetRequestConfig(authorization: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsIdPatch(authorization: kotlin.String, id: kotlin.String, organization: UpdateOrganizationInput, xRequestId: kotlin.String? = null): Organization {
        val result = v1OrganizationsIdPatchWithHttpInfo(authorization = authorization, id = id, organization = organization, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsIdPatchWithHttpInfo(authorization: kotlin.String, id: kotlin.String, organization: UpdateOrganizationInput, xRequestId: kotlin.String? = null): ResponseEntity<Organization> {
        val localVariableConfig = v1OrganizationsIdPatchRequestConfig(authorization = authorization, id = id, organization = organization, xRequestId = xRequestId)
        return request<UpdateOrganizationInput, Organization>(
            localVariableConfig
        )
    }

    fun v1OrganizationsIdPatchRequestConfig(authorization: kotlin.String, id: kotlin.String, organization: UpdateOrganizationInput, xRequestId: kotlin.String? = null) : RequestConfig<UpdateOrganizationInput> {
        val localVariableBody = organization
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/organizations/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsMetricsCountHead(authorization: kotlin.String, xRequestId: kotlin.String? = null): kotlin.String {
        val result = v1OrganizationsMetricsCountHeadWithHttpInfo(authorization = authorization, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsMetricsCountHeadWithHttpInfo(authorization: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<kotlin.String> {
        val localVariableConfig = v1OrganizationsMetricsCountHeadRequestConfig(authorization = authorization, xRequestId = xRequestId)
        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    fun v1OrganizationsMetricsCountHeadRequestConfig(authorization: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "*/*"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/v1/organizations/metrics/count",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsPost(authorization: kotlin.String, organization: CreateOrganizationInput, xRequestId: kotlin.String? = null): Organization {
        val result = v1OrganizationsPostWithHttpInfo(authorization = authorization, organization = organization, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsPostWithHttpInfo(authorization: kotlin.String, organization: CreateOrganizationInput, xRequestId: kotlin.String? = null): ResponseEntity<Organization> {
        val localVariableConfig = v1OrganizationsPostRequestConfig(authorization = authorization, organization = organization, xRequestId = xRequestId)
        return request<CreateOrganizationInput, Organization>(
            localVariableConfig
        )
    }

    fun v1OrganizationsPostRequestConfig(authorization: kotlin.String, organization: CreateOrganizationInput, xRequestId: kotlin.String? = null) : RequestConfig<CreateOrganizationInput> {
        val localVariableBody = organization
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
