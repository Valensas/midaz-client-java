/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.midaz.client.onboarding.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType


import com.midaz.client.onboarding.models.CreatePortfolioInput
import com.midaz.client.onboarding.models.Error
import com.midaz.client.onboarding.models.InlineResponse2005
import com.midaz.client.onboarding.models.Portfolio
import com.midaz.client.onboarding.models.UpdatePortfolioInput
import com.midaz.client.onboarding.infrastructure.*

class PortfoliosApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )

    /**
     * enum for parameter sortOrder
     */
    enum class SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGet(val value: kotlin.String) {
        @JsonProperty(value = "asc") asc("asc"),
        @JsonProperty(value = "desc") desc("desc")
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGet? = null): InlineResponse2005 {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, startDate = startDate, endDate = endDate, sortOrder = sortOrder)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGet? = null): ResponseEntity<InlineResponse2005> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, metadata = metadata, limit = limit, page = page, startDate = startDate, endDate = endDate, sortOrder = sortOrder)
        return request<Unit, InlineResponse2005>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, metadata: kotlin.String? = null, limit: kotlin.Int? = 10, page: kotlin.Int? = 1, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosGet? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metadata != null) {
                    put("metadata", listOf(metadata.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdDelete(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): Unit {
        v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdDeleteWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdDeleteWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Unit> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdDeleteRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdDeleteRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "*/*"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): Portfolio {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Portfolio> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, xRequestId = xRequestId)
        return request<Unit, Portfolio>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdPatch(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, portfolio: UpdatePortfolioInput, xRequestId: kotlin.String? = null): Portfolio {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdPatchWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, portfolio = portfolio, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdPatchWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, portfolio: UpdatePortfolioInput, xRequestId: kotlin.String? = null): ResponseEntity<Portfolio> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdPatchRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, id = id, portfolio = portfolio, xRequestId = xRequestId)
        return request<UpdatePortfolioInput, Portfolio>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosIdPatchRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, id: kotlin.String, portfolio: UpdatePortfolioInput, xRequestId: kotlin.String? = null) : RequestConfig<UpdatePortfolioInput> {
        val localVariableBody = portfolio
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosMetricsCountHead(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null): Unit {
        v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosMetricsCountHeadWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId)
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosMetricsCountHeadWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Unit> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosMetricsCountHeadRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosMetricsCountHeadRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "*/*"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/metrics/count",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, portfolio: CreatePortfolioInput, xRequestId: kotlin.String? = null): Portfolio {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, portfolio = portfolio, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, portfolio: CreatePortfolioInput, xRequestId: kotlin.String? = null): ResponseEntity<Portfolio> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, portfolio = portfolio, xRequestId = xRequestId)
        return request<CreatePortfolioInput, Portfolio>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdPortfoliosPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, portfolio: CreatePortfolioInput, xRequestId: kotlin.String? = null) : RequestConfig<CreatePortfolioInput> {
        val localVariableBody = portfolio
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
