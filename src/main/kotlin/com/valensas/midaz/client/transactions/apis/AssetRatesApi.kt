/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.midaz.client.transactions.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType


import com.midaz.client.transactions.models.AssetRate
import com.midaz.client.transactions.models.CreateAssetRateInput
import com.midaz.client.transactions.models.Error
import com.midaz.client.transactions.models.InlineResponse2002
import com.midaz.client.transactions.infrastructure.*

class AssetRatesApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesExternalIdGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, externalId: kotlin.String, xRequestId: kotlin.String? = null): AssetRate {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesExternalIdGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, externalId = externalId, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesExternalIdGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, externalId: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<AssetRate> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesExternalIdGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, externalId = externalId, xRequestId = xRequestId)
        return request<Unit, AssetRate>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesExternalIdGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, externalId: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "external_id" to externalId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/{external_id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortOrder
     */
    enum class SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGet(val value: kotlin.String) {
        @JsonProperty(value = "asc") asc("asc"),
        @JsonProperty(value = "desc") desc("desc")
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, assetCode: kotlin.String, xRequestId: kotlin.String? = null, to: kotlin.collections.List<kotlin.String>? = null, limit: kotlin.Int? = 10, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGet? = null, cursor: kotlin.String? = null): InlineResponse2002 {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, assetCode = assetCode, xRequestId = xRequestId, to = to, limit = limit, startDate = startDate, endDate = endDate, sortOrder = sortOrder, cursor = cursor)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, assetCode: kotlin.String, xRequestId: kotlin.String? = null, to: kotlin.collections.List<kotlin.String>? = null, limit: kotlin.Int? = 10, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGet? = null, cursor: kotlin.String? = null): ResponseEntity<InlineResponse2002> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, assetCode = assetCode, xRequestId = xRequestId, to = to, limit = limit, startDate = startDate, endDate = endDate, sortOrder = sortOrder, cursor = cursor)
        return request<Unit, InlineResponse2002>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, assetCode: kotlin.String, xRequestId: kotlin.String? = null, to: kotlin.collections.List<kotlin.String>? = null, limit: kotlin.Int? = 10, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesFromAssetCodeGet? = null, cursor: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (to != null) {
                    put("to", toMultiValue(to.toList(), "csv"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "asset_code" to assetCode,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/from/{asset_code}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesPut(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, assetRate: CreateAssetRateInput, xRequestId: kotlin.String? = null): AssetRate {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesPutWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, assetRate = assetRate, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesPutWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, assetRate: CreateAssetRateInput, xRequestId: kotlin.String? = null): ResponseEntity<AssetRate> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesPutRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, assetRate = assetRate, xRequestId = xRequestId)
        return request<CreateAssetRateInput, AssetRate>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdAssetRatesPutRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, assetRate: CreateAssetRateInput, xRequestId: kotlin.String? = null) : RequestConfig<CreateAssetRateInput> {
        val localVariableBody = assetRate
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
