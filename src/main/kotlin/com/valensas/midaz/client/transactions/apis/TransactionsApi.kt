/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.midaz.client.transactions.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType


import com.midaz.client.transactions.models.CreateTransactionInflowSwaggerModel
import com.midaz.client.transactions.models.CreateTransactionOutflowSwaggerModel
import com.midaz.client.transactions.models.Error
import com.midaz.client.transactions.models.GithubComLerianStudioMidazV3ComponentsTransactionInternalAdaptersPostgresTransactionCreateTransactionSwaggerModel
import com.midaz.client.transactions.models.InlineResponse2005
import com.midaz.client.transactions.models.Transaction
import com.midaz.client.transactions.models.UpdateTransactionInput
import com.midaz.client.transactions.infrastructure.*

class TransactionsApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsDslPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: java.io.File, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsDslPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsDslPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: java.io.File, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsDslPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return request<Map<String, PartConfig<*>>, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsDslPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: java.io.File, xRequestId: kotlin.String? = null) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "transaction" to PartConfig(body = transaction, headers = mutableMapOf()),)
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/dsl",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortOrder
     */
    enum class SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGet(val value: kotlin.String) {
        @JsonProperty(value = "asc") asc("asc"),
        @JsonProperty(value = "desc") desc("desc")
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, limit: kotlin.Int? = 10, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGet? = null, cursor: kotlin.String? = null): InlineResponse2005 {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, limit = limit, startDate = startDate, endDate = endDate, sortOrder = sortOrder, cursor = cursor)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, limit: kotlin.Int? = 10, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGet? = null, cursor: kotlin.String? = null): ResponseEntity<InlineResponse2005> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, xRequestId = xRequestId, limit = limit, startDate = startDate, endDate = endDate, sortOrder = sortOrder, cursor = cursor)
        return request<Unit, InlineResponse2005>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, xRequestId: kotlin.String? = null, limit: kotlin.Int? = 10, startDate: kotlin.String? = null, endDate: kotlin.String? = null, sortOrder: SortOrderV1OrganizationsOrganizationIdLedgersLedgerIdTransactionsGet? = null, cursor: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsInflowPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: CreateTransactionInflowSwaggerModel, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsInflowPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsInflowPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: CreateTransactionInflowSwaggerModel, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsInflowPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return request<CreateTransactionInflowSwaggerModel, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsInflowPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: CreateTransactionInflowSwaggerModel, xRequestId: kotlin.String? = null) : RequestConfig<CreateTransactionInflowSwaggerModel> {
        val localVariableBody = transaction
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/inflow",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsJsonPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: GithubComLerianStudioMidazV3ComponentsTransactionInternalAdaptersPostgresTransactionCreateTransactionSwaggerModel, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsJsonPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsJsonPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: GithubComLerianStudioMidazV3ComponentsTransactionInternalAdaptersPostgresTransactionCreateTransactionSwaggerModel, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsJsonPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return request<GithubComLerianStudioMidazV3ComponentsTransactionInternalAdaptersPostgresTransactionCreateTransactionSwaggerModel, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsJsonPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: GithubComLerianStudioMidazV3ComponentsTransactionInternalAdaptersPostgresTransactionCreateTransactionSwaggerModel, xRequestId: kotlin.String? = null) : RequestConfig<GithubComLerianStudioMidazV3ComponentsTransactionInternalAdaptersPostgresTransactionCreateTransactionSwaggerModel> {
        val localVariableBody = transaction
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsOutflowPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: CreateTransactionOutflowSwaggerModel, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsOutflowPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsOutflowPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: CreateTransactionOutflowSwaggerModel, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsOutflowPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transaction = transaction, xRequestId = xRequestId)
        return request<CreateTransactionOutflowSwaggerModel, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsOutflowPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transaction: CreateTransactionOutflowSwaggerModel, xRequestId: kotlin.String? = null) : RequestConfig<CreateTransactionOutflowSwaggerModel> {
        val localVariableBody = transaction
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/outflow",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCancelPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCancelPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCancelPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCancelPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return request<Unit, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCancelPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "transaction_id" to transactionId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/cancel",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCommitPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCommitPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCommitPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCommitPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return request<Unit, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdCommitPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "transaction_id" to transactionId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdGet(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdGetWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdGetWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdGetRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return request<Unit, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdGetRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "transaction_id" to transactionId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdPatch(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, transaction: UpdateTransactionInput, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdPatchWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, transaction = transaction, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdPatchWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, transaction: UpdateTransactionInput, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdPatchRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, transaction = transaction, xRequestId = xRequestId)
        return request<UpdateTransactionInput, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdPatchRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, transaction: UpdateTransactionInput, xRequestId: kotlin.String? = null) : RequestConfig<UpdateTransactionInput> {
        val localVariableBody = transaction
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "transaction_id" to transactionId,
        )

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdRevertPost(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): Transaction {
        val result = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdRevertPostWithHttpInfo(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return result.body!!
    }

    @Throws(RestClientResponseException::class)
    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdRevertPostWithHttpInfo(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null): ResponseEntity<Transaction> {
        val localVariableConfig = v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdRevertPostRequestConfig(authorization = authorization, organizationId = organizationId, ledgerId = ledgerId, transactionId = transactionId, xRequestId = xRequestId)
        return request<Unit, Transaction>(
            localVariableConfig
        )
    }

    fun v1OrganizationsOrganizationIdLedgersLedgerIdTransactionsTransactionIdRevertPostRequestConfig(authorization: kotlin.String, organizationId: kotlin.String, ledgerId: kotlin.String, transactionId: kotlin.String, xRequestId: kotlin.String? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        xRequestId?.apply { localVariableHeaders["X-Request-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "organization_id" to organizationId,
            "ledger_id" to ledgerId,
            "transaction_id" to transactionId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/revert",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
